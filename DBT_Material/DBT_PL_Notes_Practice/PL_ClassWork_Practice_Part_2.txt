CURSOR ATTRIBUTE PRACTICE:


Q1)

DELIMITER //

CREATE PROCEDURE PLCURSOR1()

BEGIN 

	DECLARE A INT;
	DECLARE B VARCHAR(15);
	DECLARE C INT;
	DECLARE D INT;
	DECLARE X INT DEFAULT 0;
	
	DECLARE C1 CURSOR FOR SELECT * FROM CURSOREMP;
	
	OPEN C1;
	
	WHILE X < 5 DO
	FETCH C1 INTO A,B,C,D;
	INSERT INTO TEMPP VALUES(A,B);
	SET X = X+1;
	END WHILE;
	
	CLOSE C1;


END //

DELIMITER ;







Q2)



DELIMITER //

CREATE PROCEDURE PLCURSOR2()

BEGIN 

DECLARE A INT;
DECLARE B VARCHAR(15);
DECLARE C INT;
DECLARE D INT;
DECLARE Y INT DEFAULT 0;
DECLARE C1 CURSOR FOR SELECT * FROM CURSOREMP;
DECLARE CONTINUE HANDLER FOR NOT FOUND
SET Y = 1;

OPEN C1;

CURSOR_C1_LOOP:LOOP
FETCH C1 INTO A,B,C,D;

IF Y = 1 THEN
	LEAVE CURSOR_C1_LOOP;
END IF;
INSERT INTO TEMPP VALUES(A, B);
END LOOP CURSOR_C1_LOOP;


CLOSE C1;


END //

DELIMITER ;













Q3)


DELIMITER //


CREATE PROCEDURE PLCURSOR3()


BEGIN 

	DECLARE A INT;
	DECLARE B VARCHAR(15);
	DECLARE Y INT DEFAULT 0;
	
	DECLARE C1 CURSOR FOR SELECT SAL, ENAME FROM CURSOREMP;
	
	OPEN C1;
	CURSOR_C1_LOOP:LOOP
		FETCH C1 INTO A,B;
		IF Y = 1 THEN
			LEAVE CURSOR_C1_LOOP;
		END IF;
		INSERT INTO TEMPP VALUES(A,B);
	END LOOP CURSOR_C1_LOOP;
	CLOSE C1;

END //


DELIMITER ;




Q4)

DELIMITER //

CREATE PROCEDURE PLCURSOR4PARA(EE INT, SS INT)

BEGIN 

	DECLARE A INT;
	DECLARE B INT;
	DECLARE Y INT DEFAULT 0;
	
	DECLARE C1 CURSOR FOR SELECT EMPNO, SAL FROM CURSOREMP WHERE EMPNO = EE AND SAL = SS;
	DECLARE CONTINUE HANDLER FOR NOT FOUND	
	SET Y = 1;
	
	OPEN C1;
	CURSOR_C1_LOOP:LOOP
		FETCH C1 INTO A,B;
		IF Y = 1 THEN
			LEAVE CURSOR_C1_LOOP;
		END IF;
		INSERT INTO TEMPP VALUES(A, B);
	END LOOP CURSOR_C1_LOOP;
		
	CLOSE C1;


END //


DELIMITER ;








Q5)


DELIMITER //

CREATE PROCEDURE PLCURSOR5()

BEGIN 

	DECLARE A INT;
	DECLARE B INT;
	DECLARE Y INT DEFAULT 0;
	
	DECLARE C1 CURSOR FOR SELECT EMPNO, SAL FROM CURSOREMP;
	DECLARE CONTINUE HANDLER FOR NOT FOUND	
	SET Y = 1;
	
	OPEN C1;
	CURSOR_C1_LOOP:LOOP
		FETCH C1 INTO A,B;
		IF Y = 1 THEN
			LEAVE CURSOR_C1_LOOP;
		END IF;
		UPDATE CURSOREMP SET SAL = SAL - 4.4;
	END LOOP CURSOR_C1_LOOP;
		
	CLOSE C1;


END //


DELIMITER ;









Q6)

DELIMITER //

CREATE PROCEDURE PLCURSOR6()

BEGIN 

	DECLARE A INT;
	DECLARE B VARCHAR(15);
	DECLARE C INT;
	DECLARE D INT;
	DECLARE Y INT DEFAULT 0;
	
	DECLARE C1 CURSOR FOR SELECT * FROM CURSOREMP FOR UPDATE;
	DECLARE CONTINUE HANDLER FOR NOT FOUND	
	SET Y = 1;
	
	OPEN C1;
	CURSOR_C1_LOOP:LOOP
		FETCH C1 INTO A,B,C,D;
		IF Y = 1 THEN
			LEAVE CURSOR_C1_LOOP;
		END IF;
		IF C > 7000 THEN
			DELETE FROM CURSOREMP WHERE EMPNO = A;
		END IF;
	END LOOP CURSOR_C1_LOOP;
		
	CLOSE C1;
	COMMIT;
	
END //


DELIMITER ;







STORED FUNCTION

Q1)



DELIMITER //

CREATE FUNCTION ABC()
RETURNS INT
DETERMINISTIC

BEGIN
	RETURN 10;
	
END //

DELIMTER ;





DELIMITER //

CREATE PROCEDURE PQR()

BEGIN

	DECLARE X INT;
	SET X = ABC();
	INSERT INTO TEMPP VALUES(X, 'AFTER FN ABC');

END //

DELIMITER ;











Q2)




DELIMITER //

CREATE FUNCTION ABC2(Y INT)
RETURNS INT
DETERMINISTIC	

BEGIN

	RETURN Y*Y;

END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE PQR2()

BEGIN

	DECLARE X INT;
	SET X = ABC2(10);
	INSERT INTO TEMPP VALUES(X, 'AFTER ABC2');
	

END //

DELIMITER ;







Q MAKE INITCAP FUNCTION



ANS:

DELIMITER //

CREATE FUNCTION INITCAP(Y VARCHAR(15))
RETURNS VARCHAR(15) DETERMINISTIC
BEGIN 
    RETURN CONCAT(SUBSTR(UPPER(Y), 1, 1), SUBSTR(LOWER(Y), 2));
END //

DELIMITER ;

DELIMITER //





DELIMITER //

CREATE PROCEDURE INITCAPPROC()

BEGIN

	DECLARE X VARCHAR(15);
	SET X = INITCAP('nishank');
	INSERT INTO TEMPP VALUES(1, X);
	

END //

DELIMITER ;










OUT PARAMETER:



DELIMITER //

CREATE PROCEDURE PLOUT1(OUT Y INT)


BEGIN

	-- SET Y = 9;
	INSERT INTO TEMPP VALUES(Y, 'Y INS');
END //

 
DELIMITER ;










DELIMITER //

CREATE PROCEDURE PLOUT2()


BEGIN

	DECLARE X INT DEFAULT 6;
	INSERT INTO TEMPP VALUES( X , 'B ABC');
	CALL PLOUT1(X);
	INSERT INTO TEMPP VALUES( X , 'A ABC');
	
	

END //


DELIMITER ;















TRIGGERS: 




Q1)

DELIMITER //


CREATE TRIGGER T1
AFTER INSERT
ON EMP FOR EACH ROW

BEGIN1
	INSERT INTO TEMPP VALUES(69, 'Succ Ins');

END //

DELIMITER;





Q2)


DELIMITER //

CREATE TRIGGER T2
AFTER INSERT
ON EMP FOR EACH ROW

BEGIN

	INSERT INTO TEMPP VALUES(new.SAL, 'Suce I/P');
	
END //

DELIMITER ;













